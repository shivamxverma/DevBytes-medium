// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id         Int       @id @default(autoincrement())
    email      String    @unique
    name       String?
    password   String
    posts      Post[]
    comments   Comment[]
    followers  Follower[] @relation("Followers")
    following  Follower[] @relation("Following")
    upvotes    Upvote[]
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
}

model Post {
    id        Int       @id @default(autoincrement())
    title     String
    content   String
    published Boolean   @default(false)
    author    User      @relation(fields: [authorId], references: [id])
    authorId  Int
    comments  Comment[]
    upvotes   Upvote[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Follower {
    id          Int     @id @default(autoincrement())
    follower    User    @relation("Followers", fields: [followerId], references: [id])
    followerId  Int
    following   User    @relation("Following", fields: [followingId], references: [id])
    followingId Int
    createdAt   DateTime @default(now())

    @@unique([followerId, followingId]) // Ensures a user can follow another only once
}

model Upvote {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int
    createdAt DateTime @default(now())

    @@unique([userId, postId]) // Ensures a user can upvote a post only once
}

model Comment {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int
    comment   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

